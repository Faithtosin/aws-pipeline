AWSTemplateFormatVersion: 2010-09-09
Description: CI/CD pipeline for GitHub projects
Parameters:
  ENV:
    Type: String
    Default: development
    AllowedValues:
      - development
      - production
  ECSClusterTagKey:
    Type: String
    Default: Name
  ECSClusterTagValue:
    Type: String
    Default: CodeDeployEC2Tag
  MAGuiRepositoryName:
    Type: String
    Default: ma-gui-registry
  GitHubOwner:
    Type: String
    AllowedPattern: '[A-Za-z0-9-]+'
    Default: Faithtosin
  GitHubRepository:
    Type: String
    AllowedPattern: '[A-Za-z0-9-]+'
    Default: aws-pipeline
  GitHubBranch:
    Type: String
    AllowedPattern: '[A-Za-z0-9-]+'
    Default: master
  CodeBuildEnvironmentImage:
    Type: String
    Default: 'aws/codebuild/standard:4.0'
Mappings:
  MAGuiTask:
    name:
      development: MAGui-task-dev
      production: MAGui-task-prod
  MAGuiContainer:
    name:
      development: MAGui-container-dev
      production: MAGui-container-prod
  MAGuiCluster:
    name:
      development: MAGui-cluster-dev
      production: MAGui-cluster-prod
  MAGuiService:
    name:
      development: MAGui-service-dev
      production: MAGui-service-prod
Resources:
  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: 1
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:FilterLogEvents'
                  - 'logs:GetLogEvents'
                Resource:
                  - '*'
              - Sid: 2
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:CreateBucket'
                  - 's3:List*'
                  - 's3:PutObject'
                Resource:
                  - '*'
              - Sid: 3
                Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:PutImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:InitiateLayerUpload'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeDhcpOptions'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSecurityGroupReferences'
                  - 'ec2:DescribeStaleSecurityGroups'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:CreateNetworkInterfacePermission'
                Resource:
                  - '*'
              - Sid: 4
                Effect: Allow
                Action:
                  - 'iam:AddRoleToInstanceProfile'
                  - 'iam:AttachRolePolicy'
                  - 'iam:CreateInstanceProfile'
                  - 'iam:CreatePolicy'
                  - 'iam:CreateRole'
                  - 'iam:GetRole'
                  - 'iam:ListAttachedRolePolicies'
                  - 'iam:ListPolicies'
                  - 'iam:ListRoles'
                  - 'iam:PassRole'
                  - 'iam:PutRolePolicy'
                  - 'iam:UpdateAssumeRolePolicy'
                Resource:
                  - '*'
              - Sid: 5
                Effect: Allow
                Action:
                  - 'kms:Encrypt'
                  - 'kms:Decrypt'
                  - 'kms:ReEncrypt*'
                  - 'kms:GenerateDataKey*'
                  - 'kms:DescribeKey'
                Resource:
                  - '*'
  MAGuiTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !FindInMap [MAGuiTask, name, !Ref ENV]
      ContainerDefinitions:
        - Name: !FindInMap [MAGuiContainer, name, !Ref ENV]
          PortMappings:
            - HostPort: 8080
              Protocol: tcp
              ContainerPort: 8080
          Cpu: '100'
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MAGuiRepositoryName}:latest
          Essential: true
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole
      Memory: '2048'
      NetworkMode: awsvpc
      Cpu: '1024'
      RequiresCompatibilities:
        - 'FARGATE'
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !FindInMap [MAGuiCluster, name, !Ref ENV]
      Tags:
      - Key: !Ref ECSClusterTagKey
        Value: !Ref ECSClusterTagValue
  ClusterService:
    Type: AWS::ECS::Service
    DependsOn: [ MAGuiTask, ECSCluster ]
    Properties:
      Cluster: !GetAtt ECSCluster.Arn
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '100'
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref MAGuiTask
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - sg-01a6d5f5d2be33cda
            - sg-0c2549adc2373b65a
          Subnets:
            - subnet-eae036b7
            - subnet-05a5627d
            - subnet-3d1afb77
            - subnet-bfd19f94
      ServiceName: !FindInMap [MAGuiService, name, !Ref ENV]
  CodeBuilProjectDeployDev:  
    Type: 'AWS::CodeBuild::Project'
    DependsOn: [MAGuiRepository]
    Properties:
      Name: !Sub '${AWS::StackName}-deploy-dev'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodeBuildEnvironmentImage
        EnvironmentVariables:
          - Name: ENV_NAME
            Value: dev
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MAGuiRepositoryName} 
          - Name: Container_name
            Value: MAGui-container-dev
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: 6
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
              - Sid: 7
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:CreateBucket'
                  - 's3:List*'
                Resource:
                  - '*'
              - Sid: 8
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuildBatches'
                  - 'codebuild:StartBuildBatch'
                Resource: '*'
                Effect: Allow
              - Sid: 9
                Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource:
                  - '*'
              - Sid: 10
                Effect: Allow
                Action:
                  - 'ecs:DescribeServices'
                  - 'ecs:DescribeTaskDefinition'
                  - 'ecs:DescribeTasks'
                  - 'ecs:ListTasks'
                  - 'ecs:RegisterTaskDefinition'
                  - 'ecs:UpdateService'
                Resource:
                  - '*'
  CodePipelineArtifactStore:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled
  CodePipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: >-
          {{resolve:secretsmanager:GITHUB_ACCESS:SecretString:GITHUB_ACCESS_TOKEN}}
      RegisterWithThirdParty: 'true'
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
        - JsonPath: $.repository.name
          MatchEquals: '{Repo}'
      TargetPipeline: !Ref CodePipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt CodePipeline.Version
  MAGuiRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      ImageTagMutability: MUTABLE
      RepositoryName: !Ref MAGuiRepositoryName
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:BatchDeleteImage'
              - 'ecr:BatchGetImage'
              - 'ecr:CompleteLayerUpload'
              - 'ecr:DeleteLifecyclePolicy'
              - 'ecr:DeleteRepository'
              - 'ecr:DeleteRepositoryPolicy'
              - 'ecr:DescribeImages'
              - 'ecr:DescribeRepositories'
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:GetLifecyclePolicy'
              - 'ecr:GetLifecyclePolicyPreview'
              - 'ecr:GetRepositoryPolicy'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:ListImages'
              - 'ecr:PutImage'
              - 'ecr:PutLifecyclePolicy'
              - 'ecr:SetRepositoryPolicy'
              - 'ecr:StartLifecyclePolicyPreview'
              - 'ecr:UploadLayerPart'
            Principal:
              Service:
                - codebuild.amazonaws.com
                - codepipeline.amazonaws.com
                - ecs.amazonaws.com
            Effect: Allow
            Sid: new statement
  # #Code deploy resources
  # CodeDeployServiceRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: codedeploy.amazonaws.com
  #           Action: 'sts:AssumeRole'
  #     ManagedPolicyArns: [arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS, arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforAWSCodeDeploy, arn:aws:iam::aws:policy/AdministratorAccess]
  # CodeDeployApplication: 
  #   Type: "AWS::CodeDeploy::Application"
  #   DependsOn: [ClusterService, CodePipelineServiceRole]
  #   Properties:
  #     ComputePlatform: ECS
  # CodeDeployDeploymentGroup: 
  #   Type: "AWS::CodeDeploy::DeploymentGroup"
  #   DependsOn: CodeDeployApplication
  #   Properties: 
  #     ApplicationName: 
  #       Ref: "CodeDeployApplication"
  #     DeploymentConfigName: CodeDeployDefault.AllAtOnce
  #     ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
  #     DeploymentStyle:
  #       DeploymentOption: WITH_TRAFFIC_CONTROL
  #       DeploymentType: BLUE_GREEN
  #code pipeline resources
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn: [ClusterService,ECSCluster, MAGuiTask, CodePipelineServiceRole, CodeBuilProjectDeployDev,CodePipelineArtifactStore ]
    Properties:
      Name: !Ref 'AWS::StackName'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStore
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepository
                Branch: !Ref GitHubBranch
                PollForSourceChanges: false
                OAuthToken: >-
                  {{resolve:secretsmanager:GITHUB_ACCESS:SecretString:GITHUB_ACCESS_TOKEN}}
              OutputArtifacts:
                - Name: SourceCode
        - Name: Dev   
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuilProjectDeployDev
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Deploy
          Actions:
            - Name: DeployService
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: '1'
              RunOrder: 1
              Configuration:
                ClusterName: !FindInMap [MAGuiCluster, name, !Ref ENV]
                ServiceName: !FindInMap [MAGuiService, name, !Ref ENV]
                # ApplicationName: !Ref CodeDeployApplication
                # DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              OutputArtifacts: []
              InputArtifacts:
                - Name: BuildOutput

